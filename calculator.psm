; REGISTER MAPPING
op10	  EQU	 s8;	1st operand LSB
op11	  EQU 	 s0;	1st operand MSB
op20	  EQU	 s9;	2nd operand LSB
op21	  EQU	 s1;	2nd operand MSB
res0	  EQU	 sF;	result register byte 0
res1	  EQU	 sE;	result register byte 1
res2	  EQU	 sD;	result register byte 2
res3	  EQU	 sC;	result register byte 3
temp0	  EQU	 s4;	temporary storage
temp1	  EQU	 s5;	temporary storage
temp2     EQU    s3
count	  EQU	 s6;	symbol counter

; SORTED BUTTON CODES
DIV		  EQU	 $4A
ENT		  EQU	 $5A
NUM_1	  EQU	 $69
NUM_4	  EQU	 $6B
NUM_7	  EQU	 $6C

NUM_0	  EQU	 $70
SPEC	  EQU	 $71
NUM_2	  EQU	 $72
NUM_5	  EQU	 $73
NUM_6	  EQU	 $74

NUM_8	  EQU	 $75
ESC	      EQU	 $77
PLUS	  EQU	 $79
NUM_3	  EQU	 $7A

MINUS	  EQU	 $7B
MULT	  EQU	 $7C
NUM_9	  EQU	 $7D

; IMAGE CODES
IMG_PLUS	 EQU $0A
IMG_MINUS	 EQU $0B
IMG_MULT	 EQU $0C
IMG_DIV		 EQU $0D
IMG_POINT	 EQU $0E
IMG_BLANK	 EQU $0F

; PORTS
KEYBOARD_IN	 DSIO $80
DEBUG_OUT 	 DSOUT $81

; SCREEN AREAS
scr_in_1     DSIO 42
scr_in_2     DSIO 43
scr_in_3     DSIO 44
scr_in_4     DSIO 45
scr_out_1    DSOUT 62
scr_out_2    DSOUT 63
scr_out_3    DSOUT 64
scr_out_4    DSOUT 65

; temporary storage
storx0   DSIO 101
storx1   DSIO 102
stor20   DSIO 103
stor21   DSIO 104


; implement: ARCTAN!!!


EINT ; enable interrupts


CALL RESET_DISPLAY; reset display


MAIN: ; wait cycle
    JUMP MAIN


ISR: ; handles interrupts
    LOAD count,0 ; counter to zero
    OUT count,DEBUG_OUT ; dbg output to zero
    IN temp0,KEYBOARD_IN
    JUMP KEYCODE_ACTION
    ISR_OUT:
RETI ENABLE


; ------------------------------------------------------------------------------
; make x from input:

MAKE_X:
    IN temp0,scr_in_1
    OUT temp0,storx1

    IN op11,scr_in_3
    LOAD op10,0
    CALL DIVIDE_BY_10
    LOAD temp2,res0

    IN op11,scr_in_4
    LOAD op10,0
    CALL DIVIDE_BY_100
    ADD temp2,res0

    OUT temp2,storx0
    RET


; ------------------------------------------------------------------------------
; draw result to display:

DRAW_RESULT:
	OUT res1,scr_out_1 ; 10^0
	
	IN temp0,IMG_POINT
	OUT temp0,scr_out_2 ; point
	
	LOAD op10,res0
	LOAD op11,0
	CALL MULTIPLY_BY_10
	OUT res1,scr_out_3 ; 10^-1
	
	LOAD op10,res0
	LOAD op11,0
	CALL MULTIPLY_BY_10
	OUT res1,scr_out_4 ; 10^-2
	RET


; ------------------------------------------------------------------------------
; arctan:

ARCTAN:

    RET


; ------------------------------------------------------------------------------
; square:

SQUARE: ; fill in op10 and op11, call it and get the result afterwards
	LOAD op20,op10
	LOAD op21,op11
	CALL MULTIPLICATION
	RET


; ------------------------------------------------------------------------------
; multiply by ten

MULTIPLY_BY_10: ; fill in op10 and op11, call it and get the result afterwards
    LOAD op21,10
    LOAD op20,0
    CALL MULTIPLICATION
    RET
    

; ------------------------------------------------------------------------------
; devide by ten

DIVIDE_BY_10: ; fill in op10 and op11, call it and get the result afterwards
    LOAD op21,0
    LOAD op20,10
    CALL DIVISION
    RET
    
    
; ------------------------------------------------------------------------------
; devide by ten

DIVIDE_BY_100: ; fill in op10 and op11, call it and get the result afterwards
    LOAD op21,0
    LOAD op20,100
    CALL DIVISION
    RET


; ------------------------------------------------------------------------------
; division:

DIVISION:
    LOAD count,0
    LOAD res0,0
    LOAD res1,0
    LOAD res2,0
    LOAD res3,0

    DIV_PREPARE:
        LOAD temp0,op21
        COMP temp0,$80
        JUMP NC,DIV_LOOP
        SL0 op20
        SLA op21
        ADD count,1
    JUMP DIV_PREPARE

    DIV_LOOP:
        COMP op21,op11 ; compare operands
        JUMP NZ,DIV_LOOP_SKIP
        COMP op20,op10
        DIV_LOOP_SKIP:
        JUMP C,DIV_OP2_SMALLER
        JUMP DIV_OP2_BIGGER
        CONTINUE_DIV_LOOP:
            COMP count,0
            RET Z
            SR0 op21
            SRA op20
            SUB count,1
    JUMP DIV_LOOP

    DIV_OP2_SMALLER:
        SUB op10,op20
        SUBC op11,op21
        SL1 res0
        SLA res1
        JUMP CONTINUE_DIV_LOOP

    DIV_OP2_BIGGER:
        SL0 res0
        SLA res1
        JUMP CONTINUE_DIV_LOOP


; ------------------------------------------------------------------------------
; multiplication:

MULTIPLICATION:
	LOAD count,16 ; number of bits
	CALL MULT_RESET_MASK
	LOAD res0,0
	LOAD res1,0
	LOAD res2,0
	LOAD res3,0

	MULT_LOOP:
	    COMP count,9
	    JUMP C,MULT_LOAD_MSB
	    JUMP MULT_LOAD_LSB
	    MULT_LOOP_DECISION:
	        AND temp1, temp0
	        COMP temp1, temp0
	        JUMP NZ,MULT_LOOP_CONTINUE
                ADD res2,op10
	        ADDC res3,op11
    	        MULT_LOOP_CONTINUE:

                    SR0 res3 ; instead of shifting op1 left, I shift res to the right
                    SRA res2
                    SRA res1
                    SRA res0

    	            COMP count,1 ; because it's before subtraction happens, check for 1
                    RET Z ; if count == 1, return

    	            SL0 temp0 ; shift mask left
    	            SUB count,1 ; subtract 1 from count

    	            COMP count,8
    	            CALL Z,MULT_RESET_MASK
        JUMP MULT_LOOP

    MULT_RESET_MASK:
        LOAD temp0,1
    RET

    MULT_LOAD_LSB:
        LOAD temp1, op20
    JUMP MULT_LOOP_DECISION

    MULT_LOAD_MSB:
        LOAD temp1, op21
    JUMP MULT_LOOP_DECISION


; ------------------------------------------------------------------------------
; handling keypresses:

PRESSED_NUMBER: ; handles numbers
    IN temp0,scr_in_3
    OUT temp0,scr_in_1
    IN temp0,scr_in_4
    OUT temp0,scr_in_3
    OUT temp1,scr_in_4
    JUMP ISR_OUT


PRESSED_SYMBOL: ; handles symbols
    ADD temp1,$40 ; dbg
    OUT temp1,DEBUG_OUT
    JUMP ISR_OUT


CALCULATE: ; handles ENTER key
    ADD temp1,$20 ; dbg
    OUT temp1,DEBUG_OUT
    CALL MAKE_X
    CALL ARCTAN
    CALL DRAW_RESULT
    JUMP ISR_OUT


CLEAR: ; handles ESC key
    LOAD temp1,$10 ; dbg
    OUT temp1,DEBUG_OUT
    CALL RESET_DISPLAY
    JUMP ISR_OUT


RESET_DISPLAY:
    LOAD temp0,0 ; zero
    OUT count,scr_in_1
    OUT count,scr_in_3
    OUT count,scr_in_4
    LOAD temp0,IMG_POINT ; point sign
    OUT temp0,scr_in_2
    LOAD temp0,$F ; whitespace
    OUT temp0,scr_out_1
    OUT temp0,scr_out_2
    OUT temp0,scr_out_3
    OUT temp0,scr_out_4
    RET


KEYCODE_ACTION: ; translates keycodes to actions

    GROUP_0:
    COMP temp0,$70
    JUMP NC,GROUP_1

        ;GROUP_0_0:
        COMP temp0,DIV
        JUMP NZ,GROUP_0_1
        LOAD temp1,IMG_DIV
        JUMP PRESSED_SYMBOL

        GROUP_0_1:
        COMP temp0,ENT
        JUMP NZ,GROUP_0_2
        JUMP CALCULATE

        GROUP_0_2:
        COMP temp0,NUM_1
        JUMP NZ,GROUP_0_3
        LOAD temp1,1
        JUMP PRESSED_NUMBER

        GROUP_0_3:
        COMP temp0,NUM_4
        JUMP NZ,GROUP_0_4
        LOAD temp1,4
        JUMP PRESSED_NUMBER

        GROUP_0_4:
        COMP temp0,NUM_7
        JUMP NZ,GROUP_1
        LOAD temp1,7
        JUMP PRESSED_NUMBER

    GROUP_1:
    COMP temp0,$75
    JUMP NC,GROUP_2

        ;GROUP_1_0
        COMP temp0,NUM_0
        JUMP NZ,GROUP_1_1
        LOAD temp1,0
        JUMP PRESSED_NUMBER

        GROUP_1_1:
        COMP temp0,SPEC
        JUMP NZ,GROUP_1_2
        LOAD temp1,IMG_POINT
        JUMP PRESSED_SYMBOL

        GROUP_1_2:
        COMP temp0,NUM_2
        JUMP NZ,GROUP_1_3
        LOAD temp1,2
        JUMP PRESSED_NUMBER

        GROUP_1_3:
        COMP temp0,NUM_5
        JUMP NZ,GROUP_1_4
        LOAD temp1,5
        JUMP PRESSED_NUMBER

        GROUP_1_4:
        COMP temp0,NUM_6
        JUMP NZ,GROUP_2
        LOAD temp1,6
        JUMP PRESSED_NUMBER

    GROUP_2:
    COMP temp0,$7B
    JUMP NC,GROUP_3

        ;GROUP_2_0:
        COMP temp0,NUM_8
        JUMP NZ,GROUP_2_1
        LOAD temp1,8
        JUMP PRESSED_NUMBER

        GROUP_2_1:
        COMP temp0,ESC
        JUMP NZ,GROUP_2_2
        JUMP CLEAR

        GROUP_2_2:
        COMP temp0,PLUS
        JUMP NZ,GROUP_2_3
        LOAD temp1,IMG_PLUS
        JUMP PRESSED_SYMBOL

        GROUP_2_3:
        COMP temp0,NUM_3
        JUMP NZ,GROUP_3
        LOAD temp1,3
        JUMP PRESSED_NUMBER

    GROUP_3:
    COMP temp0,$7E
    JUMP NC,ISR_OUT ; if key isn't mapped, exit

        ;GROUP_3_0:
        COMP temp0,MINUS
        JUMP NZ,GROUP_3_1
        LOAD temp1,IMG_MINUS
        JUMP PRESSED_SYMBOL

        GROUP_3_1:
        COMP temp0,MULT
        JUMP NZ,GROUP_3_2
        LOAD temp1,IMG_MULT
        JUMP PRESSED_SYMBOL

        GROUP_3_2:
        COMP temp0,NUM_9
        JUMP NZ,ISR_OUT
        LOAD temp1,9
        JUMP PRESSED_NUMBER

    JUMP ISR_OUT ; if key isn't mapped, exit

; KEYCODE_ACTION end


; ------------------------------------------------------------------------------


ORG $3FF ; in case of interruptions
JUMP ISR

