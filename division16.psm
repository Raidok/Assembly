op10	  EQU	 s8;	1st operand LSB
op11	  EQU 	 s0;	1st operand MSB
op20	  EQU	 s9;	2nd operand LSB
op21	  EQU	 s1;	2nd operand MSB
res0	  EQU	 sF;	result register byte 0
res1	  EQU	 sE;	result register byte 1
res2	  EQU	 sD;	result register byte 2
res3	  EQU	 sC;	result register byte 3
temp0	  EQU	 s4;	temporary storage
count	  EQU	 s6;	counter

op10_in  DSIN 110
op11_in  DSIN 111
op20_in  DSIN 112
op21_in  DSIN 113
res0_out DSOUT 120
res1_out DSOUT 121
res2_out DSOUT 122
res3_out DSOUT 123


EINT


MAIN:
    JUMP MAIN


ISR:
    IN op10,op10_in
    IN op11,op11_in
    IN op20,op20_in
    IN op21,op21_in
    CALL DIVISION
    OUT res0,res0_out
    OUT res1,res1_out
    OUT res2,res2_out
    OUT res3,res3_out
RETI ENABLE


DIVISION:
    LOAD count,0
    LOAD res0,0
    LOAD res1,0
    LOAD res2,0
    LOAD res3,0

    DIV_PREPARE:
        LOAD temp0,op21
        COMP temp0,$80
        JUMP NC,DIV_ENTER_LOOP
        SL0 op20
        SLA op21
        ADD count,1
    JUMP DIV_PREPARE

    DIV_ENTER_LOOP:
        CALL DIV_LOOP
        ADD res0,1
        RET
        
    DIV_LOOP:
        COMP op21,op11 ; compare operands
        JUMP NZ,DIV_LOOP_SKIP
        COMP op20,op10
        DIV_LOOP_SKIP:
        JUMP C,DIV_OP2_SMALLER
        JUMP DIV_OP2_BIGGER
        CONTINUE_DIV_LOOP:
            COMP count,0
            RET Z
            SR0 op21
            SRA op20
            SUB count,1
    JUMP DIV_LOOP

    DIV_OP2_SMALLER:
        SUB op10,op20
        SUBC op11,op21
        SL1 res0
        SLA res1
        JUMP CONTINUE_DIV_LOOP

    DIV_OP2_BIGGER:
        SL0 res0
        SLA res1
        JUMP CONTINUE_DIV_LOOP


ORG $3FF
JUMP ISR
