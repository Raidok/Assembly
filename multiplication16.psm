op10	  EQU	 s8;	1st operand LSB
op11	  EQU 	 s0;	1st operand MSB
op20	  EQU	 s9;	2nd operand LSB
op21	  EQU	 s1;	2nd operand MSB
res0	  EQU	 sF;	result register byte 0
res1	  EQU	 sE;	result register byte 1
res2	  EQU	 sD;	result register byte 2
res3	  EQU	 sC;	result register byte 3
temp0	  EQU	 s4;	temporary storage
temp1	  EQU	 s5;	temporary storage
count	  EQU	 s6;	counter

op10_in  DSIN 110
op11_in  DSIN 111
op20_in  DSIN 112
op21_in  DSIN 113
res0_out DSOUT 120
res1_out DSOUT 121
res2_out DSOUT 122
res3_out DSOUT 123

EINT


MAIN:
	JUMP MAIN


ISR:
	IN op10,op10_in
	IN op11,op11_in
	IN op20,op20_in
	IN op21,op21_in
	CALL MULTIPLICATION
	OUT res0,res0_out
	OUT res1,res1_out
	OUT res2,res2_out
	OUT res3,res3_out
RETI ENABLE


MULTIPLICATION:
	LOAD count,16 ; number of bits
	CALL MULT_RESET
	LOAD res0,0
	LOAD res1,0
	LOAD res2,0
	LOAD res3,0
	
	MULT_LOOP:
	    COMP count,9
	    JUMP C,MULT_MSB
	    JUMP MULT_LSB
	    MULT_LOOP_DECISION:
	        AND temp1, temp0
	        COMP temp1, temp0
	        JUMP NZ,MULT_LOOP_CONTINUE
            ADD res2,op10
	        ADDC res3,op11
    	    MULT_LOOP_CONTINUE:
    	
	            SR0 res3
	            SRA res2
	            SRA res1
	            SRA res0
	            
    	        OUT res0,res0_out ; debug
    	        OUT res1,res1_out ; debug
            	OUT res2,res2_out ; debug
            	OUT res3,res3_out ; debug
    	
    	        SL0 temp0 ; shift mask left
    	        SUB count,1 ; subtract 1 from count
    	
    	        COMP count,8
    	        CALL Z,MULT_RESET
    	
    	        COMP count,0 ; is count 0 yet?
            RET Z ; if count == 0, return
    JUMP MULT_LOOP
    
    MULT_RESET:
	    LOAD temp0,1
    RET
	    
	MULT_LSB:
	    LOAD temp1, op20
    JUMP MULT_LOOP_DECISION
	
	MULT_MSB:
	    LOAD temp1, op21
    JUMP MULT_LOOP_DECISION


ORG $3FF
JUMP ISR
